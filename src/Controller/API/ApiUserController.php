<?php

namespace App\Controller\API;

use App\Entity\User;
use App\Repository\ResultRepository;
use App\Repository\TournamentRegistrationRepository;
use App\Repository\UserRepository;
use Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

#[Route("/api")]
class ApiUserController extends AbstractController
{
    /**
     * CREATE
     * The SUPERADMIN can create a new admin.
     */
    #[IsGranted("ROLE_SUPERADMIN")]
    #[Route("/admin/user/admin", name: "api_user_createAdminAccount", methods: "POST")]
    public function createAdminAccount(UserRepository $repository, UserPasswordHasherInterface $hasher, Request $request, SerializerInterface $serializer, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $serializer->deserialize($jsonReceived, User::class, "json");

        if ($user->isPasswordAutoGenerated()) {
            $password = "";
            for ($i = 0; $i < 6; $i++) {
                $alpha = mt_rand(97, 122);
                $alphaMaj = mt_rand(65, 90);
                $char = mt_rand(1, 2) === 1 ? mt_rand(0, 9) : (mt_rand(1, 2) === 1 ? chr($alpha) : chr($alphaMaj));
                $password .= $char;
            }
            $user->setPassword($password);
            $user->setConfirmPassword($password);
        }

        $errors = $validator->validate($user);
        if (count($errors) > 0) {
            return $this->json($errors, 400);
        }

        $user->setLastName(strtoupper($user->getLastName()));
        $user->setFirstName(ucwords($user->getFirstName()));
        $user->setPassword($hasher->hashPassword($user, $password));
        $user->setRoles(["ROLE_ADMIN", "ROLE_MEMBER"]);

        if ($user->getState() === null) {
            $user->setState("active");
        }
        if ($user->isValidatedAccount() === null) {
            $user->setValidatedAccount(true);
        }

        $repository->add($user, true);

        if (isset($uploadedFile)) {
            // File settings
            $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
            $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

            try {
                $uploadedFile->move($destination, $newFileName);
            } catch (FileException $e) {
                echo $e->getMessage();
            }

            $user->setAvatarFileName($newFileName);
            $user->setAvatarFileUrl($destination . $newFileName);
            $repository->add($user, true);
        }

        // the FFBadStat property is automatically set by a SQL trigger when an user is created
        return $this->json($user, 201, [], ["groups" => "user:create"]);
    }

    /**
     * CREATE
     * An ADMIN can create a new member.
     * During creation, the member can add an avatarFile. For that, the multipart/form-data method is required.
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/member", name: "api_user_createMemberAccount", methods: "POST")]
    public function createMemberAccount(UserRepository $repository, UserPasswordHasherInterface $hasher, Request $request, SerializerInterface $serializer, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $serializer->deserialize($jsonReceived, User::class, "json");

        if ($user->isPasswordAutoGenerated()) {
            $password = "";
            for ($i = 0; $i < 6; $i++) {
                $alpha = mt_rand(97, 122);
                $alphaMaj = mt_rand(65, 90);
                $char = mt_rand(1, 2) === 1 ? mt_rand(0, 9) : (mt_rand(1, 2) === 1 ? chr($alpha) : chr($alphaMaj));
                $password .= $char;
            }
            $user->setPassword($password);
            $user->setConfirmPassword($password);
        }

        $errors = $validator->validate($user);
        if (count($errors) > 0) {
            return $this->json($errors, 400);
        }

        $user->setLastName(strtoupper($user->getLastName()));
        $user->setFirstName(ucwords($user->getFirstName()));
        $user->setPassword($hasher->hashPassword($user, $user->getPassword()));

        if ($user->getState() === null) {
            $user->setState("active");
        }
        if (
            $user->isValidatedAccount() === null
        ) {
            $user->setValidatedAccount(true);
        }

        $repository->add($user, true);

        if (isset($uploadedFile)) {
            // File settings
            $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
            $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

            try {
                $uploadedFile->move($destination, $newFileName);
            } catch (FileException $e) {
                echo $e->getMessage();
            }

            $user->setAvatarFileName($newFileName);
            $user->setAvatarFileUrl($destination . $newFileName);
            $repository->add($user, true);
        }

        // the FFBadStat property is automatically set by a SQL trigger when an user is created
        return $this->json($user, 201, [], ["groups" => "user:create"]);
    }

    /**
     * CREATE
     * A MEMBER can create his account.
     * During creation, the member can add an avatarFile. For that, the multipart/form-data method is required.
     */
    #[Route("/user/account", name: "api_user_createAccount", methods: "POST")]
    public function createAccount(UserRepository $repository, UserPasswordHasherInterface $hasher, Request $request, SerializerInterface $serializer, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $serializer->deserialize($jsonReceived, User::class, "json");

        $errors = $validator->validate($user);
        if (count($errors) > 0) {
            return $this->json($errors, 400);
        }

        $user->setLastName(strtoupper($user->getLastName()));
        $user->setFirstName(ucwords($user->getFirstName()));
        $hashedPassword = $hasher->hashPassword($user, $user->getPassword());
        $user->setPassword($hashedPassword);
        $user->setState("pending");
        $repository->add($user, true);

        if (isset($uploadedFile)) {
            // File settings
            $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
            $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

            try {
                $uploadedFile->move($destination, $newFileName);
            } catch (FileException $e) {
                echo $e->getMessage();
            }

            $user->setAvatarFileName($newFileName);
            $user->setAvatarFileUrl($destination . $newFileName);
            $repository->add($user, true);
        }

        // the FFBadStat property is automatically set by a SQL trigger when an user is created
        return $this->json($user, 201, [], ["groups" => "user:create"]);
    }

    /**
     * READ
     * An ADMIN can get details of one member from his id.
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/{id}", "api_user_readOneMemberDetails", methods: "GET")]
    public function readOneMemberDetails(UserRepository $repository, int $id): JsonResponse
    {
        return $this->json($repository->find($id), 200, context: ["groups" => "user:read"]);
    }

    /**
     * READ
     * An ADMIN can get details of all users (admin + member).
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route('/admin/users', 'api_user_readAll', methods: "GET")]
    public function readAllUsers(UserRepository $repository): JsonResponse
    {
        return $this->json($repository->findAll(), 200, context: ["groups" => "user:read"]);
    }

    /**
     * READ
     * A MEMBER can get details of his account.
     */
    #[IsGranted("ROLE_MEMBER")]
    #[Route("/user", name: "api_user_readMemberAccount", methods: "GET")]
    public function readMemberAccount(UserRepository $repository): JsonResponse
    {
        $user = $repository->findOneBy(["id" => $this->getUser()->getUserIdentifier()]);
        return $this->json($user, 200, context: ["groups" => "user:read"]);
    }

    /**
     * UPDATE
     * The SUPERADMIN can promote a member to admin role.
     */
    #[IsGranted("ROLE_SUPERADMIN")]
    #[Route("/admin/user/{id}/promotion", "api_user_promoteMember", methods: "PATCH")]
    public function promoteMember(UserRepository $repository, int $id): JsonResponse
    {
        $user = $repository
            ->find($id)
            ->setRoles(["ROLE_ADMIN", "ROLE_MEMBER"]);
        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * UPDATE
     * The SUPERADMIN can demote an admin to member role.
     */
    #[IsGranted("ROLE_SUPERADMIN")]
    #[Route("/admin/user/{id}/demotion", "api_user_demoteAdmin", methods: "PATCH")]
    public function demoteAdmin(UserRepository $repository, int $id): JsonResponse
    {
        $user = $repository
            ->find($id)
            ->setRoles(["ROLE_MEMBER"]);
        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * UPDATE
     * An admin can update member's account details.
     * WARNING : if the user send file, the method POST is required because multipart/form-data only support POST method (and no PATCH).
     * Only one file is stored by user.
     * If a new file is uploaded, it will replace the older.
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/admin/{id}", name: "api_user_updateAdminDetails", methods: ["POST", "PATCH"])]
    public function updateAdminDetails(UserRepository $repository, SerializerInterface $serializer, Request $request, int $id, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $repository->find($id);
        $newUserInfos = $serializer->deserialize($jsonReceived, User::class, "json");

        if ($newUserInfos->getEmail()) {
            $user->setEmail($newUserInfos->getEmail());
        }
        if ($newUserInfos->getRoles()) {
            $user->setRoles($newUserInfos->getRoles());
        }
        if ($newUserInfos->getLastName()) {
            $user->setLastName(strtoupper($newUserInfos->getLastName()));
        }
        if ($newUserInfos->getFirstName()) {
            $user->setFirstName(ucwords($newUserInfos->getFirstName()));
        }
        if ($newUserInfos->getGender()) {
            $user->setGender($newUserInfos->getGender());
        }
        if ($newUserInfos->getBirthDate()) {
            $user->setBirthDate($newUserInfos->getBirthDate());
        }
        if (isset($uploadedFile)) {
            // File settings
            $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
            $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

            if ($user->getAvatarFileName() && file_exists($user->getAvatarFileUrl())) {
                unlink($user->getAvatarFileUrl());
            }

            try {
                $uploadedFile->move($destination, $newFileName);
            } catch (FileException $e) {
                echo $e->getMessage();
            }

            $user->setAvatarFileName($newFileName);
            $user->setAvatarFileUrl($destination . $newFileName);
        }
        if ($newUserInfos->getState()) {
            $user->setState($newUserInfos->getState());
        }
        if ($newUserInfos->isValidatedAccount()) {
            $user->setValidatedAccount($newUserInfos->isValidatedAccount());
        }
        $user->setUpdatedAt(new \DateTimeImmutable());

        $errors = $validator->validate($user);
        if (count($errors) > 0) {
            return $this->json($errors, 400);
        }

        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update",]);
    }

    /**
     * UPDATE
     * An admin can update member's account details.
     * WARNING : if the user send file, the method POST is required because multipart/form-data only support POST method (and no PATCH).
     * Only one file is stored by user.
     * If a new file is uploaded, it will replace the older.
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/member/{id}", name: "api_user_updateMemberDetails", methods: ["POST", "PATCH"])]
    public function updateMemberDetails(UserRepository $repository, SerializerInterface $serializer, Request $request, int $id, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $repository->find($id);

        if (in_array("ROLE_ADMIN", $user->getRoles())) {
            throw new Exception("An admin can't update an other admin info.");
        } else {
            $newUserInfos = $serializer->deserialize($jsonReceived, User::class, "json");

            if ($newUserInfos->getEmail()) {
                $user->setEmail($newUserInfos->getEmail());
            }
            if ($newUserInfos->getLastName()) {
                $user->setLastName(strtoupper($newUserInfos->getLastName()));
            }
            if ($newUserInfos->getFirstName()) {
                $user->setFirstName(ucwords($newUserInfos->getFirstName()));
            }
            if ($newUserInfos->getGender()) {
                $user->setGender($newUserInfos->getGender());
            }
            if ($newUserInfos->getBirthDate()) {
                $user->setBirthDate($newUserInfos->getBirthDate());
            }
            if (isset($uploadedFile)) {
                // File settings
                $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
                $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

                if ($user->getAvatarFileName() && file_exists($user->getAvatarFileUrl())) {
                    unlink($user->getAvatarFileUrl());
                }

                try {
                    $uploadedFile->move($destination, $newFileName);
                } catch (FileException $e) {
                    echo $e->getMessage();
                }

                $user->setAvatarFileName($newFileName);
                $user->setAvatarFileUrl($destination . $newFileName);
            }
            if ($newUserInfos->getState()) {
                $user->setState($newUserInfos->getState());
            }
            if ($newUserInfos->isValidatedAccount()) {
                $user->setValidatedAccount($newUserInfos->isValidatedAccount());
            }
            $user->setUpdatedAt(new \DateTimeImmutable());

            $errors = $validator->validate($user);
            if (count($errors) > 0) {
                return $this->json($errors, 400);
            }

            $repository->add($user, true);
            return $this->json($user, 201, context: ["groups" => "user:update",]);
        }
    }

    /**
     * UPDATE
     * An ADMIN can validate member's account.
     * This method set the property validateAccount on true && state on "active".
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/{id}/account-validation", "api_user_validateAccount", methods: "PATCH")]
    public function validateAccount(UserRepository $repository, int $id): JsonResponse
    {
        $user = $repository
            ->find($id)
            ->setValidatedAccount(true)
            ->setState("active");
        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * UPDATE
     * An ADMIN can move a member's state account to inactive.
     * This method set the property state to "inactive".
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/{id}/inactivation", "api_user_inactivateAccount", methods: "PATCH")]
    public function inactivateAccount(UserRepository $repository, int $id): JsonResponse
    {
        $user = $repository
            ->find($id)
            ->setState("inactive");
        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * UPDATE
     * An ADMIN can activate (or reactivate) a member account.
     * This method set the property state to "active".
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/{id}/activation", "api_user_activateAccount", methods: "PATCH")]
    public function activateAccount(UserRepository $repository, int $id): JsonResponse
    {
        $user = $repository
            ->find($id)
            ->setState("active");
        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * UPDATE
     * A MEMBER can update his account's details.
     * WARNING : if the user send file, the method POST is required because multipart/form-data only support POST method (and no PATCH).
     * Only one file is stored by member.
     * If a new file is uploaded, it will replace the older.
     */
    #[IsGranted("ROLE_MEMBER")]
    #[Route("/user", name: "api_user_updateAccountDetails", methods: ["POST", "PATCH"])]
    public function updateAccountDetails(UserRepository $repository, SerializerInterface $serializer, UserPasswordHasherInterface $hasher, Request $request, ValidatorInterface $validator): JsonResponse
    {
        // Request using multipart/form-data
        if ($request->request->get("data")) {
            $jsonReceived = $request->request->get("data");
        } else {
            // Request using raw Body
            $jsonReceived = $request->getContent();
        }

        // Request using multipart/form-data
        if ($request->files->get("file")) {
            $uploadedFile = $request->files->get("file");
        }

        $user = $repository->find($this->getUser()->getUserIdentifier());

        $newUserInfos = $serializer->deserialize($jsonReceived, User::class, "json");

        if ($newUserInfos->getEmail() !== NULL) {
            $user->setEmail($newUserInfos->getEmail());
        }

        if ($newUserInfos->getPassword() !== NULL) {
            if ($newUserInfos->getPreviousPassword() && $newUserInfos->getConfirmPassword()) {
                $validPassword = $hasher->isPasswordValid($user, $newUserInfos->getPreviousPassword());
                if ($validPassword) {
                    if ($newUserInfos->getPassword() === $newUserInfos->getConfirmPassword()) {
                        $hashedPassword = $hasher->hashPassword($user, $newUserInfos->getPassword());
                        $user->setPassword($hashedPassword);
                    } else {
                        throw new Exception("The password does not match with the confirm password.");
                    }
                } else {
                    throw new Exception("The previous password is not correct.");
                }
            } else {
                throw new Exception("At least one information related to password is missing.");
            }
        }
        if ($newUserInfos->getLastName() !== NULL) {
            $user->setLastName(strtoupper($newUserInfos->getLastName()));
        }
        if ($newUserInfos->getFirstName() !== NULL) {
            $user->setFirstName(ucwords($newUserInfos->getFirstName()));
        }
        if (isset($uploadedFile)) {
            // File settings
            $destination = $this->getParameter("kernel.project_dir") . "/src/data/avatarFiles/";
            $newFileName = "avatar-user" . $user->getId() . "-" . uniqid() . "." . $uploadedFile->guessExtension();

            if ($user->getAvatarFileName() && file_exists($user->getAvatarFileUrl())) {
                unlink($user->getAvatarFileUrl());
            }

            try {
                $uploadedFile->move($destination, $newFileName);
            } catch (FileException $e) {
                echo $e->getMessage();
            }

            $user->setAvatarFileName($newFileName);
            $user->setAvatarFileUrl($destination . $newFileName);
        }
        $user->setUpdatedAt(new \DateTimeImmutable());

        $errors = $validator->validate($user);
        if (count($errors) > 0) {
            return $this->json($errors, 400);
        }

        $repository->add($user, true);
        return $this->json($user, 201, context: ["groups" => "user:update"]);
    }

    /**
     * DELETE
     * The SUPERADMIN can remove a user (admin or member).
     * An ADMIN can remove a member.
     */
    #[IsGranted("ROLE_ADMIN")]
    #[Route("/admin/user/{id}", "api_user_deleteUser", methods: "DELETE")]
    public function deleteUser(UserRepository $repository, TournamentRegistrationRepository $tournamentRegistrationRepo, ResultRepository $resultRepo, int $id): JsonResponse
    {
        $admin = $this->getUser();
        $userToDelete = $repository->find($id);
        $results = $resultRepo->findBy(["User" => $userToDelete]);
        $registrations = $tournamentRegistrationRepo->findBy(["user" => $userToDelete]);

        if (in_array("ROLE_SUPERADMIN", $userToDelete->getRoles())) {
            throw new Exception("You have not the permission to delete this user.");
        }

        if (in_array("ROLE_ADMIN", $admin->getRoles()) && in_array("ROLE_ADMIN", $userToDelete->getRoles())) {
            throw new Exception("An admin can not delete an other admin.");
        }

        foreach ($registrations as $index => $value) {
            $value->setUserFirstName($userToDelete->getFirstName());
            $value->setUserLastName($userToDelete->getFirstName());
            $value->setUserEmail($userToDelete->getEmail());
            $value->setUser(null);
        }

        foreach ($results as $key => $value) {
            $value->setUser(null);
        }

        if ($userToDelete->getAvatarFileName() && file_exists($userToDelete->getAvatarFileUrl())) {
            unlink($userToDelete->getAvatarFileUrl());
        }

        $repository->remove($userToDelete, true);

        if (in_array("ROLE_ADMIN", $userToDelete->getRoles())) {
            return $this->json([
                "status" => 200,
                "message" => "The admin with the id #$id has been correctly deleted."
            ], 200);
        } else {
            return $this->json([
                "status" => 200,
                "message" => "The member with the id #$id has been correctly deleted."
            ], 200);
        }
    }
}
